#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–≥—Ä—ã "–ó–º–µ–π–∫–∞"
"""

import sys
import os

def test_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("üêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...")
    version = sys.version_info
    print(f"   –í–µ—Ä—Å–∏—è Python: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print("   ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7 –∏–ª–∏ –≤—ã—à–µ")
        return False
    else:
        print("   ‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
        return True

def test_pygame():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ pygame"""
    print("\nüéÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ pygame...")
    try:
        import pygame
        print(f"   –í–µ—Ä—Å–∏—è pygame: {pygame.version.ver}")
        
        # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        pygame.init()
        print("   ‚úÖ pygame —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
        test_surface = pygame.Surface((100, 100))
        print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        pygame.quit()
        return True
        
    except ImportError:
        print("   ‚ùå pygame –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pygame")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ pygame: {e}")
        return False

def test_game_import():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–≥—Ä—ã"""
    print("\nüïπÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–≥—Ä—ã...")
    try:
        from snake_game import SnakeGame, Direction, GameState
        print("   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ enum'–æ–≤
        assert Direction.UP.value == (0, -1)
        assert Direction.RIGHT.value == (1, 0)
        print("   ‚úÖ Enum Direction —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        assert GameState.MENU.value == 1
        assert GameState.PLAYING.value == 2
        print("   ‚úÖ Enum GameState —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
    
    files_to_check = [
        ('snake_game.py', '–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä—ã'),
        ('requirements.txt', '–§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'),
        ('README.md', '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'),
        ('run_game.bat', '–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞')
    ]
    
    all_good = True
    for filename, description in files_to_check:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"   ‚úÖ {filename} ({description}) - {size} –±–∞–π—Ç")
        else:
            print(f"   ‚ùå {filename} ({description}) - –Ω–µ –Ω–∞–π–¥–µ–Ω")
            all_good = False
    
    return all_good

def test_game_logic():
    """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    print("\nüßÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
    try:
        import pygame
        pygame.init()
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞
        screen = pygame.Surface((800, 600))
        
        from snake_game import SnakeGame
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–≥—Ä—ã (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞)
        game = SnakeGame.__new__(SnakeGame)
        game.screen = screen
        game.clock = pygame.time.Clock()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã
        game.font_large = pygame.font.Font(None, 48)
        game.font_medium = pygame.font.Font(None, 36)
        game.font_small = pygame.font.Font(None, 24)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±—Ä–æ—Å –∏–≥—Ä—ã
        game.reset_game()
        print("   ‚úÖ –°–±—Ä–æ—Å –∏–≥—Ä—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assert len(game.snake) == 1
        assert game.score == 0
        assert game.speed == 10
        print("   ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –µ–¥—ã
        food = game.generate_food()
        assert isinstance(food, tuple)
        assert len(food) == 2
        print("   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        pygame.quit()
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ –∏–≥—Ä—ã: {e}")
        pygame.quit()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ì–†–´ '–ó–ú–ï–ô–ö–ê'")
    print("=" * 40)
    
    tests = [
        test_python_version,
        test_pygame,
        test_files,
        test_game_import,
        test_game_logic
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"   üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
    
    print("\n" + "=" * 40)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python snake_game.py")
        print("   –∏–ª–∏")
        print("   run_game.bat")
        return True
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
